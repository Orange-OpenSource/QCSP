"""
Software Name : QCSP Orange
SPDX-FileCopyrightText: Copyright (c) Orange SA
SPDX-License-Identifier: MIT

This software is distributed under the MIT License,
see the "LICENSE.txt" file for more details or https://spdx.org/licenses/MIT.html

Authors: 
    Louis-Adrien DUFRÃˆNE    louisadrien.dufrene@orange.com
    Guillaume LARUE         guillaume.larue@orange.com
    Quentin LAMPIN          quentin.lampin@orange.com

Software description: Orange study on the combination of CCSK and OFDM modulation. Part of the QCSP ANR project. See Deliverable D2.5b_OFDM-CCSK.pdf
"""

import pytest
import tensorflow as tf

from . import DFTLinkCell2, DFTLinkDemodulator



# DFTLinkDemodulator
def test_set_a_priori_absolute_shift_proba():
    num_ofdm_symb = 6
    ccsk_length = 4

    pilots_positions = 0
    pilots_shifts = 0 

    outputs = tf.constant([
        [1,0,0,0],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkDemodulator._set_a_priori_absolute_shift_proba(num_ofdm_symb,ccsk_length,pilots_positions,pilots_shifts),outputs))

    pilots_positions = 3
    pilots_shifts = 1 

    outputs = tf.constant([
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0,1,0,0],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkDemodulator._set_a_priori_absolute_shift_proba(num_ofdm_symb,ccsk_length,pilots_positions,pilots_shifts),outputs))

    pilots_positions = [0,5]
    pilots_shifts = [0,0] 

    outputs = tf.constant([
        [1,0,0,0],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],        
        [0.25, 0.25, 0.25, 0.25],
        [1,0,0,0]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkDemodulator._set_a_priori_absolute_shift_proba(num_ofdm_symb,ccsk_length,pilots_positions,pilots_shifts),outputs))

    pilots_positions = [2,4]
    pilots_shifts = [3,1] 

    outputs = tf.constant([
        [0.25, 0.25, 0.25, 0.25],
        [0.25, 0.25, 0.25, 0.25],
        [0,0,0,1],
        [0.25, 0.25, 0.25, 0.25],
        [0,1,0,0],        
        [0.25, 0.25, 0.25, 0.25],
    ])

    assert tf.reduce_all(tf.equal(DFTLinkDemodulator._set_a_priori_absolute_shift_proba(num_ofdm_symb,ccsk_length,pilots_positions,pilots_shifts),outputs))


# DFTLinkCell2
def test_select_messages_1():
    inputs = tf.constant([
        [
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
        ],
        [
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
        ]
    ])
    outputs = tf.constant([
        [
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
        ],
        [
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
        ]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_messages_1(inputs, num_ofdm_symb = 4),outputs))

def test_select_messages_2():
    inputs = tf.constant([
        [
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
        ],
        [
            [10,10,10],
            [20,20,20],
            [30,30,30],
            [40,40,40],
            [50,50,50],
            [60,60,60],
            [70,70,70],
            [80,80,80],
            [90,90,90],
            [100,100,100],
            [110,110,110],
            [120,120,120],
            [130,130,130],
            [140,140,140],
            [150,150,150],
            [160,160,160],
        ]
    ])
    outputs = tf.constant([
        [
            [1,1,1],
            [1,1,1],
            [1,1,1],
            [1,1,1],
            [5,5,5],
            [5,5,5],
            [5,5,5],
            [5,5,5],
            [9,9,9],
            [9,9,9],
            [9,9,9],
            [9,9,9],
            [13,13,13],
            [13,13,13],
            [13,13,13],
            [13,13,13],
            [2,2,2],
            [2,2,2],
            [2,2,2],
            [2,2,2],
            [6,6,6],
            [6,6,6],
            [6,6,6],
            [6,6,6],
            [10,10,10],
            [10,10,10],
            [10,10,10],
            [10,10,10],
            [14,14,14],
            [14,14,14],
            [14,14,14],
            [14,14,14],
            [3,3,3],
            [3,3,3],
            [3,3,3],
            [3,3,3],
            [7,7,7],
            [7,7,7],
            [7,7,7],
            [7,7,7],
            [11,11,11],
            [11,11,11],
            [11,11,11],
            [11,11,11],
            [15,15,15],
            [15,15,15],
            [15,15,15],
            [15,15,15],
            [4,4,4],
            [4,4,4],
            [4,4,4],
            [4,4,4],
            [8,8,8],
            [8,8,8],
            [8,8,8],
            [8,8,8],
            [12,12,12],
            [12,12,12],
            [12,12,12],
            [12,12,12],
            [16,16,16],
            [16,16,16],
            [16,16,16],
            [16,16,16],
        ],
        [
            [10,10,10],
            [10,10,10],
            [10,10,10],
            [10,10,10],
            [50,50,50],
            [50,50,50],
            [50,50,50],
            [50,50,50],
            [90,90,90],
            [90,90,90],
            [90,90,90],
            [90,90,90],
            [130,130,130],
            [130,130,130],
            [130,130,130],
            [130,130,130],
            [20,20,20],
            [20,20,20],
            [20,20,20],
            [20,20,20],
            [60,60,60],
            [60,60,60],
            [60,60,60],
            [60,60,60],
            [100,100,100],
            [100,100,100],
            [100,100,100],
            [100,100,100],
            [140,140,140],
            [140,140,140],
            [140,140,140],
            [140,140,140],
            [30,30,30],
            [30,30,30],
            [30,30,30],
            [30,30,30],
            [70,70,70],
            [70,70,70],
            [70,70,70],
            [70,70,70],
            [110,110,110],
            [110,110,110],
            [110,110,110],
            [110,110,110],
            [150,150,150],
            [150,150,150],
            [150,150,150],
            [150,150,150],
            [40,40,40],
            [40,40,40],
            [40,40,40],
            [40,40,40],
            [80,80,80],
            [80,80,80],
            [80,80,80],
            [80,80,80],
            [120,120,120],
            [120,120,120],
            [120,120,120],
            [120,120,120],
            [160,160,160],
            [160,160,160],
            [160,160,160],
            [160,160,160],
        ]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_messages_2(inputs, num_ofdm_symb = 4),outputs))

def test_update_messages_1():
    inputs = tf.constant([
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ],
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ]
    ], dtype=tf.float32)  
    outputs = tf.constant([
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ],
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ]
    ], dtype=tf.float32) 

    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_1(inputs,num_ofdm_symb=4),outputs))

def test_replace_diagonal_elt_by_dirac():
    inputs = tf.constant([
        [
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16]
        ],
        [
            [1,1,1],
            [200,200,200],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16]
        ],
    ], dtype=tf.float32)
    outputs = tf.constant([
        [
            [1,0,0],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [1,0,0],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [1,0,0],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [1,0,0]
        ],
        [
            [1,0,0],
            [200,200,200],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [1,0,0],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [1,0,0],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [1,0,0]
        ],
    ], dtype=tf.float32)

    assert tf.reduce_all(tf.equal(DFTLinkCell2._replace_diagonal_elt_by_dirac(inputs,num_ofdm_symb=4),outputs))

def test_normalize_distribution():
    inputs = tf.constant([
        [1.,0.,0.,0.],
        [0.85,0.,0.,0.],
        [0.25,0.25,0.25,0.25],
        [3.,3.,3.,3.],
        [0.,0.,0.,0.],
        [1.,2.,1.,0.]
    ],dtype=tf.float32)
    outputs = tf.constant([
        [1,0,0,0],
        [1,0,0,0],
        [0.25,0.25,0.25,0.25],
        [0.25,0.25,0.25,0.25],
        [0.25,0.25,0.25,0.25],
        [0.25,0.5,0.25,0]
    ],dtype=tf.float32)
    assert tf.reduce_all(tf.equal(DFTLinkCell2._normalize_distribution(inputs),outputs))

def test_matrix_indices_to_vector_indices():
    assert tf.reduce_all(tf.equal(DFTLinkCell2._matrix_indices_to_vector_indices([],4),[]))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._matrix_indices_to_vector_indices([(0,3),(3,0)],4),[12,3]))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._matrix_indices_to_vector_indices([(1,3),(3,1),(2,3),(3,2)],4),[13,7,14,11]))

def test_update_relative_shift_equality_constraints():
    relative_shift_matrices = tf.constant(
    [
        [
            [
                [0,0,0],
                [1,1,1],
                [2,2,2],
                [3,3,3]
            ],
            [
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7]
            ],
            [
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11]
            ],
            [
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ]
        ],
        [
            [
                [0,0,0],
                [11,11,11],
                [2,2,2],
                [3,3,3]
            ],
            [
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7]
            ],
            [
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11]
            ],
            [
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ]
        ]
    ], dtype=tf.float32)

    relative_shift_matrices_shape = tf.shape(relative_shift_matrices)
    batch_size = relative_shift_matrices_shape[0]
    num_ofdm_symb = relative_shift_matrices_shape[1]
    ccsk_length = relative_shift_matrices_shape[-1]
    flattened_relative_shift_matrices = tf.reshape(relative_shift_matrices,[batch_size,-1,ccsk_length])

    equality_constraints_list = tf.constant([
        [(0,0),(0,1),(0,3)],    #0,4,12
        [(1,0),(1,1),(1,3)],    #1,5,13
        [(2,0),(2,1),(2,3)],    #2,6,14
        [(3,0),(3,1),(3,3)],    #3,7,15
        [(0,0),(1,0),(3,0)],    #0,1,3
        [(0,1),(1,1),(3,1)],    #4,5,7
        [(0,2),(1,2),(3,2)],    #8,9,11
        [(0,3),(1,3),(3,3)],    #12,13,15
    ])

    equality_constraints_list_vector = DFTLinkCell2._matrix_indices_to_vector_indices(equality_constraints_list, num_ofdm_symb) #shape: [num_of_equality_constraints,num_of_variable_in_each_constraint]

    possible_outputs_1 = tf.constant([
        [
            [0,0,0],    
            [65,65,65],     #[0,0,0] 
            [168,168,168],    
            [315,315,315],  #[0,0,0]   
            [0,0,0],        #[140,140,140]
            [65,65,65],     #[140,140,140]  
            [168,168,168],    
            [315,315,315],  #[140,140,140]  
            [792,792,792],        
            [792,792,792],    
            [10,10,10], 
            [792,792,792], 
            [0,0,0],        #[2340,2340,2340] 
            [65,65,65],     #[2340,2340,2340]
            [168,168,168],  
            [315,315,315]   #[2340,2340,2340]
        ],
        [
            [0,0,0],    
            [715,715,715],  #[0,0,0] 
            [168,168,168],    
            [315,315,315],  #[0,0,0]   
            [0,0,0],        #[140,140,140]
            [715,715,715],   #[140,140,140]  
            [168,168,168],    
            [315,315,315],  #[140,140,140]  
            [792,792,792],        
            [792,792,792],    
            [10,10,10], 
            [792,792,792], 
            [0,0,0],        #[2340,2340,2340] 
            [715,715,715],  #[2340,2340,2340]
            [168,168,168],  
            [315,315,315]   #[2340,2340,2340]
        ],
    ], dtype=tf.float32)

    possible_outputs_2 = tf.constant([
        [
            [0,0,0],    
            [0,0,0],        #[65,65,65]      #
            [168,168,168],    
            [0,0,0],        #[315,315,315],  #
            [140,140,140],  #[0,0,0],        #
            [140,140,140],  #[65,65,65],     #  
            [168,168,168],    
            [140,140,140],  #[315,315,315],  #  
            [792,792,792],        
            [792,792,792],    
            [10,10,10], 
            [792,792,792], 
            [2340,2340,2340],#[0,0,0],        # 
            [2340,2340,2340],#[65,65,65], 
            [168,168,168],  
            [2340,2340,2340],#[315,315,315]   #
        ],
        [
            [0,0,0],    
            [0,0,0],        #[715,715,715],  #
            [168,168,168],    
            [0,0,0],        #[315,315,315],  #   
            [140,140,140],  #[0,0,0],        #
            [140,140,140],  #[715,715,715],   #  
            [168,168,168],    
            [140,140,140],  #[315,315,315],  #  
            [792,792,792],        
            [792,792,792],    
            [10,10,10], 
            [792,792,792], 
            [2340,2340,2340],#[0,0,0],        # 
            [2340,2340,2340],#[715,715,715], 
            [168,168,168],  #
            [2340,2340,2340],#[315,315,315]   #
        ],
    ], dtype=tf.float32)

    function_outputs = DFTLinkCell2._update_relative_shift_equality_constraints(flattened_relative_shift_matrices, equality_constraints_list_vector)
    assert tf.reduce_all(tf.logical_or(tf.equal(function_outputs,possible_outputs_1),tf.equal(function_outputs,possible_outputs_2))) 

def test_generate_equality_constraints_list_from_pilot_idx():
    pilot_idx_list = [0,1,3]
    num_ofdm_symb = 4

    outputs = tf.constant([
        [(0,0),(0,1),(0,3)],   
        [(0,0),(1,0),(3,0)], 
        [(1,0),(1,1),(1,3)],  
        [(0,1),(1,1),(3,1)], 
        [(2,0),(2,1),(2,3)],
        [(0,2),(1,2),(3,2)],     
        [(3,0),(3,1),(3,3)],   
        [(0,3),(1,3),(3,3)],    
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._generate_equality_constraints_list_from_pilot_idx(pilot_idx_list,num_ofdm_symb),outputs)) 

def test_select_updated_messages_simplified():
    inputs = tf.constant([
        [
            [0,0,0],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [17,17,17],
            [18,18,18],
            [19,19,19],
            [20,20,20],
            [21,21,21],
            [22,22,22],
            [23,23,23],
            [24,24,24],
            [25,25,25],
            [26,26,26],
            [27,27,27],
            [28,28,28],
            [29,29,29],
            [30,30,30],
            [31,31,31],
            [32,32,32],
            [33,33,33],
            [34,34,34],
            [35,35,35],
            [36,36,36],
            [37,37,37],
            [38,38,38],
            [39,39,39],
            [40,40,40],
            [41,41,41],
            [42,42,42],
            [43,43,43],
            [44,44,44],
            [45,45,45],
            [46,46,46],
            [47,47,47],
            [48,48,48],
            [49,49,49],
            [50,50,50],
            [51,51,51],
            [52,52,52],
            [53,53,53],
            [54,54,54],
            [55,55,55],
            [56,56,56],
            [57,57,57],
            [58,58,58],
            [59,59,59],
            [60,60,60],
            [61,61,61],
            [62,62,62],
            [63,63,63],
        ],
        [
            [100,100,100],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [17,17,17],
            [18,18,18],
            [19,19,19],
            [20,20,20],
            [21,21,21],
            [22,22,22],
            [23,23,23],
            [24,24,24],
            [25,25,25],
            [26,26,26],
            [27,27,27],
            [28,28,28],
            [29,29,29],
            [30,30,30],
            [31,31,31],
            [32,32,32],
            [33,33,33],
            [34,34,34],
            [35,35,35],
            [36,36,36],
            [37,37,37],
            [38,38,38],
            [39,39,39],
            [40,40,40],
            [41,41,41],
            [42,42,42],
            [43,43,43],
            [44,44,44],
            [45,45,45],
            [46,46,46],
            [47,47,47],
            [48,48,48],
            [49,49,49],
            [50,50,50],
            [51,51,51],
            [52,52,52],
            [53,53,53],
            [54,54,54],
            [55,55,55],
            [56,56,56],
            [57,57,57],
            [58,58,58],
            [59,59,59],
            [60,60,60],
            [61,61,61],
            [62,62,62],
            [63,63,63],
        ],
    ])
    outputs = tf.constant([
        [
            [
                [0,0,0],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [21,21,21],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [42,42,42],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [63,63,63]
            ]
        ],
        [
            [
                [100,100,100],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [21,21,21],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [42,42,42],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [63,63,63]
            ]
        ]
    ])
    
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified(inputs,num_ofdm_symb=4),outputs))

def test_select_updated_messages_simplified_mask():
    mask = tf.cast(tf.constant([
        [[1],[1],[1],[1],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[1],[1],[1],[1],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[1],[1],[1],[1],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[1],[1],[1],[1]]
    ], dtype=tf.int32),dtype=tf.bool)
    symetric_mask = tf.cast(tf.constant([
        [[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1]],
        [[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1]],
        [[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1]],
        [[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1]]
    ], dtype=tf.int32),dtype=tf.bool)
    mask_nd_symetric_mask = tf.logical_or(mask,symetric_mask)
    inverted_mask = symetric_mask
    num_ofdm_symb=4

    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_mask(num_ofdm_symb,keep_symetric=False,invert_masks=False),mask_nd_symetric_mask))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_mask(num_ofdm_symb,keep_symetric=False,invert_masks=True),mask_nd_symetric_mask))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_mask(num_ofdm_symb,keep_symetric=True,invert_masks=False),mask))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_mask(num_ofdm_symb,keep_symetric=True,invert_masks=True),inverted_mask))
    
def test_select_updated_messages_simplified_masked():
    num_ofdm_symb=4
    inputs = tf.constant([
        [
            [0,0,0],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [4,4,4],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [17,17,17],
            [18,18,18],
            [19,19,19],
            [20,20,20],
            [21,21,21],
            [22,22,22],
            [23,23,23],
            [24,24,24],
            [25,25,25],
            [26,26,26],
            [27,27,27],
            [28,28,28],
            [29,29,29],
            [30,30,30],
            [31,31,31],
            [32,32,32],
            [33,33,33],
            [34,34,34],
            [35,35,35],
            [36,36,36],
            [37,37,37],
            [38,38,38],
            [39,39,39],
            [40,40,40],
            [41,41,41],
            [42,42,42],
            [43,43,43],
            [44,44,44],
            [45,45,45],
            [46,46,46],
            [47,47,47],
            [48,48,48],
            [49,49,49],
            [50,50,50],
            [51,51,51],
            [52,52,52],
            [53,53,53],
            [54,54,54],
            [55,55,55],
            [56,56,56],
            [57,57,57],
            [58,58,58],
            [59,59,59],
            [60,60,60],
            [61,61,61],
            [62,62,62],
            [63,63,63],
        ],
        [
            [0,0,0],
            [1,1,1],
            [2,2,2],
            [3,3,3],
            [400,400,400],
            [5,5,5],
            [6,6,6],
            [7,7,7],
            [8,8,8],
            [9,9,9],
            [10,10,10],
            [11,11,11],
            [12,12,12],
            [13,13,13],
            [14,14,14],
            [15,15,15],
            [16,16,16],
            [17,17,17],
            [18,18,18],
            [19,19,19],
            [20,20,20],
            [21,21,21],
            [22,22,22],
            [23,23,23],
            [24,24,24],
            [25,25,25],
            [26,26,26],
            [27,27,27],
            [28,28,28],
            [29,29,29],
            [30,30,30],
            [31,31,31],
            [32,32,32],
            [33,33,33],
            [34,34,34],
            [35,35,35],
            [36,36,36],
            [37,37,37],
            [38,38,38],
            [39,39,39],
            [40,40,40],
            [41,41,41],
            [42,42,42],
            [43,43,43],
            [44,44,44],
            [45,45,45],
            [46,46,46],
            [47,47,47],
            [48,48,48],
            [49,49,49],
            [50,50,50],
            [51,51,51],
            [52,52,52],
            [53,53,53],
            [54,54,54],
            [55,55,55],
            [56,56,56],
            [57,57,57],
            [58,58,58],
            [59,59,59],
            [60,60,60],
            [61,61,61],
            [62,62,62],
            [63,63,63],
        ],
    ], dtype=tf.float32)
    outputs = tf.constant([
        [
            [
                [0,0,0],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [21,21,21],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [42,42,42],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [63,63,63]
            ]
        ],
        [
            [
                [0,0,0],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [400,400,400],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [21,21,21],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [42,42,42],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [63,63,63]
            ]
        ]
    ],dtype=tf.float32)
    xx = 1.
    outputs_masked = tf.constant([
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ],
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [400,400,400],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ]
    ],dtype=tf.float32)
    xx = 1/3
    outputs_masked_norm = tf.constant([
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [4,4,4],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ],
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [400,400,400],
                [5,5,5],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [10,10,10],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [15,15,15]
            ],
            [
                [16,16,16],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [26,26,26],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [31,31,31]
            ],
            [
                [32,32,32],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [37,37,37],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [47,47,47]
            ],
            [
                [48,48,48],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [53,53,53],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [58,58,58],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ]
    ],dtype=tf.float32)
    xx = 1.
    outputs_mask_nd_symetric_masked = tf.constant([
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [4,4,4],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ],
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [400,400,400],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ]        
    ],dtype=tf.float32)
    xx = 1/3
    outputs_mask_nd_symetric_masked_norm = tf.constant([
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [4,4,4],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ],
        [
            [
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [400,400,400],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx],
                [xx,xx,xx]
            ]
        ]        
    ],dtype=tf.float32)
    xx = 1.
    outputs_masked_inverted = tf.constant([
        [
            [
                [xx,xx,xx],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [4,4,4],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [xx,xx,xx],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [xx,xx,xx],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [xx,xx,xx]
            ]
        ], 
        [
            [
                [xx,xx,xx],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [400,400,400],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [xx,xx,xx],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [xx,xx,xx],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [xx,xx,xx]
            ]
        ]      
    ],dtype=tf.float32)
    xx = 1/3
    outputs_masked_inverted_norm = tf.constant([
        [
            [
                [xx,xx,xx],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [4,4,4],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [xx,xx,xx],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [xx,xx,xx],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [xx,xx,xx]
            ]
        ], 
        [
            [
                [xx,xx,xx],
                [1,1,1],
                [2,2,2],
                [3,3,3],
                [400,400,400],
                [xx,xx,xx],
                [6,6,6],
                [7,7,7],
                [8,8,8],
                [9,9,9],
                [xx,xx,xx],
                [11,11,11],
                [12,12,12],
                [13,13,13],
                [14,14,14],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [17,17,17],
                [18,18,18],
                [19,19,19],
                [20,20,20],
                [xx,xx,xx],
                [22,22,22],
                [23,23,23],
                [24,24,24],
                [25,25,25],
                [xx,xx,xx],
                [27,27,27],
                [28,28,28],
                [29,29,29],
                [30,30,30],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [33,33,33],
                [34,34,34],
                [35,35,35],
                [36,36,36],
                [xx,xx,xx],
                [38,38,38],
                [39,39,39],
                [40,40,40],
                [41,41,41],
                [xx,xx,xx],
                [43,43,43],
                [44,44,44],
                [45,45,45],
                [46,46,46],
                [xx,xx,xx]
            ],
            [
                [xx,xx,xx],
                [49,49,49],
                [50,50,50],
                [51,51,51],
                [52,52,52],
                [xx,xx,xx],
                [54,54,54],
                [55,55,55],
                [56,56,56],
                [57,57,57],
                [xx,xx,xx],
                [59,59,59],
                [60,60,60],
                [61,61,61],
                [62,62,62],
                [xx,xx,xx]
            ]
        ]      
    ],dtype=tf.float32)
    
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=False, invert_masks=False),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=False, invert_masks=True),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=True, invert_masks=False),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=True, invert_masks=True),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=False, invert_masks=False),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=False, invert_masks=True),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=True, invert_masks=False),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=True, invert_masks=True),outputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=False, invert_masks=False),outputs_mask_nd_symetric_masked))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=False, invert_masks=True),outputs_mask_nd_symetric_masked))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=True, invert_masks=False),outputs_mask_nd_symetric_masked_norm))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=True, invert_masks=True),outputs_mask_nd_symetric_masked_norm))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=False, invert_masks=False),outputs_masked))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=False, invert_masks=True),outputs_masked_inverted))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=True, invert_masks=False),outputs_masked_norm))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._select_updated_messages_simplified_masked(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=True, invert_masks=True),outputs_masked_inverted_norm))

def test_update_messages_simplified():
    inputs = tf.constant([
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ],
        [
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,0,1],
            [1,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,1,0,0],
            [0,0,1,0],
            [1,0,0,0]
        ]
    ], dtype=tf.float32) 

    num_ofdm_symb = 4

    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=False) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=False, normalize=True) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=False) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=False, keep_symetric=True, normalize=True) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=False) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=False, normalize=True) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=False) ,inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._update_messages_simplified(inputs, num_ofdm_symb, apply_mask=True, keep_symetric=True, normalize=True) ,inputs))

def test_pad_to_power_of_2():
    inputs = tf.constant([
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ]
    ])

    outputs_1 = tf.constant([
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0]
        ],
        [
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1]
        ]
    ])

    outputs_2 = tf.constant([
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1,1,1,1,1]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1,1,1,1,1]
        ],
        [
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1.0, 2.0, 3.0, 4.0, 5.0],
            [1,1,1,1,1]
        ]
    ])

    outputs_3 = tf.constant([
        [
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1]
        ],
        [
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1]
        ],
        [
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1],
            [1,1.0, 2.0, 3.0, 4.0, 5.0,1,1]
        ]
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 0),outputs_1))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 1),outputs_2))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 2),outputs_3))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -3),outputs_1))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -2),outputs_2))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -1),outputs_3))

    inputs = tf.constant([
        [
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0]
        ],
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 0),inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 1),inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = 2),inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -3),inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -2),inputs))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._pad_to_power_of_2(inputs, axis = -1),inputs))

def test_split_axis():
    inputs = tf.constant([
        [
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0]
        ],
        [
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0],
            [1.0, 2.0, 3.0, 4.0]
        ],
    ])

    outputs_1 = tf.constant([
        [
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
        ]
    ])

    outputs_2 = tf.constant([
        [
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
        ],
        [
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
            [
                [1.0, 2.0, 3.0, 4.0],
                [1.0, 2.0, 3.0, 4.0]
            ],
        ],
    ])

    outputs_3 = tf.constant([
        [
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ]
            ]
        ],
        [
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ],
            ],
            [
                [
                    1.0, 2.0
                ], 
                [   
                    3.0, 4.0
                ]
            ]
        ],
    ])

    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = 0),outputs_1))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = 1),outputs_2))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = 2),outputs_3))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = -3),outputs_1))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = -2),outputs_2))
    assert tf.reduce_all(tf.equal(DFTLinkCell2._split_axis(inputs, axis_to_split = -1),outputs_3))


if __name__ == "__main__":
    pytest.main()